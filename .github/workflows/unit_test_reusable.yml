on:
  workflow_call:

jobs:
  backend-api:
    name: Backend API Unit Tests
    runs-on: ubuntu-latest
    env:
      JWT_PRIVATE_KEY: ${{ secrets.JWT_PRIVATE_KEY }}
    steps:
      - uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4
      - uses: ./.github/actions/setup-python
      # Stand up the system stack, to have something to poke
      - name: Run backend unit tests
        working-directory: ./backend/ops_api/
        run: pipenv run pytest

  backend-data-tools:
    name: Data-Tools Unit Tests
    runs-on: ubuntu-latest
    env:
      JWT_PRIVATE_KEY: "__blank__"
    steps:
      - uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4
      - uses: ./.github/actions/setup-python
      - name: Run backend unit tests
        working-directory: ./backend/data_tools/
        run: pipenv install --dev && pipenv run pytest

  frontend:
    name: Frontend Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4
      - uses: ./.github/actions/setup-javascript
      # Stand up the system stack, to have something to poke
      - name: Run frontend unit tests
        working-directory: ./frontend
        run: bun run test

  prepare-matrix:
    name: Prepare Matrix
    runs-on: ubuntu-latest
    outputs:
        files: ${{ steps.set-files.outputs.FILES }}
    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 #v4.1.1

      - id: set-files
        run: |
          FILE_LIST=$(ls frontend/cypress/e2e/*.cy.js | jq -R -s -c 'split("\n")[:-1]')
          echo "FILES={$FILE_LIST}" >> $GITHUB_OUTPUT

      - name: Print files output for testing
        run: |
          echo "${{ steps.set-files.outputs.FILES }}"

  e2e:
    name: End-to-End Testing
    needs: prepare-matrix
    runs-on: ubuntu-latest
    env:
      FILES: ${{ needs.prepare-matrix.outputs.files }}
    strategy:
      fail-fast: false
      matrix:
        file: ${{ FILES }}

    steps:
      - name: Checkout
        uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4

      # Install NPM dependencies, cache them correctly
      # and run all Cypress tests
      - uses: ./.github/actions/setup-javascript

      # Stand up the system stack, to have something to poke
      - name: Launch Stack
        uses: ./.github/actions/run-full-stack
        env:
          JWT_PRIVATE_KEY: ${{ secrets.JWT_PRIVATE_KEY }}

      # Install Cypress globally
      - name: Install Cypress globally
        run: bun install -g cypress

      # Run the Cypress E2E Tests
      - name: E2E Test
        working-directory: frontend
        run: bun run cypress install && bun run test:e2e --spec ${{ matrix.file }}

      # Upload Cypress screenshots as artifact if a test fails
      - name: Upload screenshots if failure
        if: failure() # This step will run only if the previous step fails
        uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4
        with:
          path: frontend/cypress/screenshots # Update this path based on your project structure
          name: cypress-screenshots

      # Capture logs from all services
      - name: Capture logs
        shell: bash
        if: always()
        run: | # Capture logs from all services
          docker compose -f docker-compose.yml logs --no-color > full-stack-logs.log

      # Upload logs as artifact
      - name: Upload logs as artifact
        if: always() # Ensure this runs, even if E2E fails
        uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4
        with:
          # Set the path to the log file
          path: full-stack-logs.log
          # Optionally, set a name for the artifact
          name: full-stack-logs
