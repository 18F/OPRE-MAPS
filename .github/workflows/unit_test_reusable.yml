on:
  workflow_call:

jobs:
  backend-api:
    name: Backend API Unit Tests
    runs-on: ubuntu-latest
    env:
      JWT_PRIVATE_KEY: ${{ secrets.JWT_PRIVATE_KEY }}
    steps:
      - uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4
      - uses: ./.github/actions/setup-python
      # Stand up the system stack, to have something to poke
      - name: Run backend unit tests
        working-directory: ./backend/ops_api/
        run: pipenv run pytest

  backend-data-tools:
    name: Data-Tools Unit Tests
    runs-on: ubuntu-latest
    env:
      JWT_PRIVATE_KEY: "__blank__"
    steps:
      - uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4
      - uses: ./.github/actions/setup-python
      - name: Run backend unit tests
        working-directory: ./backend/data_tools/
        run: pipenv install --dev && pipenv run pytest

  frontend:
    name: Frontend Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4
      - uses: ./.github/actions/setup-javascript
      # Stand up the system stack, to have something to poke
      - name: Run frontend unit tests
        working-directory: ./frontend
        run: bun run test

  prepare-matrix:
    name: Prepare Matrix
    runs-on: ubuntu-latest
    outputs:
        files: ${{ steps.set-files.outputs.FILES }}
    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 #v4.1.1

      - id: set-files
        run: |
          FILE_LIST=$(ls frontend/cypress/e2e/*.cy.js | jq -R -s -c 'split("\n")[:-1]')
          echo "FILES=$FILE_LIST" >> $GITHUB_OUTPUT

      - name: Print files output for testing
        run: |
          echo "${{ steps.set-files.outputs.FILES }}"

  test:
    name: Test-FromJson
    runs-on: ubuntu-latest
    needs: prepare-matrix
    steps:
      - name: Print fromJson output for testing
        run: |
          echo "${{fromJson(needs.prepare-matrix.outputs.files)}}"

  e2e:
    name: End-to-End Testing
    runs-on: ubuntu-latest

    strategy:
      fail-fast: true
      matrix:
        file: ${{fromJson(needs.prepare-matrix.outputs.files)}}

    needs: prepare-matrix

    steps:
      # Parse file and extract test file name
      - name: Parse Filename
        id: parse-filename
        run: |
          TEST_FILE=$(basename "${{ matrix.file }}" | sed 's/\.cy\.js//')
          echo "TEST_FILE=$TEST_FILE" >> $GITHUB_ENV

      - name: Print Parse Filname output for testing
        run: |
          echo $TEST_FILE
          echo "${{ steps.parse-filename.outputs.TEST_FILE }}"
