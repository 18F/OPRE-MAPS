"""update CAN model

Revision ID: eb4261420779
Revises: 9be2fd1e3794
Create Date: 2024-08-21 19:50:26.324014+00:00

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "eb4261420779"
down_revision: Union[str, None] = "9be2fd1e3794"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # manually added
    sa.Sequence("can_funding_received_id_seq", start=500, increment=1).create(
        op.get_bind()
    )

    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum("OPRE", "ACF", "HHS", name="canfundingsource").create(op.get_bind())
    sa.Enum("DIRECT", "COST_SHARE", "IAA", "IDDA", name="canmethodoftransfer").create(
        op.get_bind()
    )
    op.create_table(
        "can_funding_budget_version",
        sa.Column("id", sa.Integer(), autoincrement=False, nullable=False),
        sa.Column("fiscal_year", sa.Integer(), autoincrement=False, nullable=True),
        sa.Column("fund_code", sa.String(), autoincrement=False, nullable=True),
        sa.Column("budget", sa.Numeric(), autoincrement=False, nullable=True),
        sa.Column("notes", sa.String(), autoincrement=False, nullable=True),
        sa.Column("created_by", sa.Integer(), autoincrement=False, nullable=True),
        sa.Column("updated_by", sa.Integer(), autoincrement=False, nullable=True),
        sa.Column("created_on", sa.DateTime(), autoincrement=False, nullable=True),
        sa.Column("updated_on", sa.DateTime(), autoincrement=False, nullable=True),
        sa.Column(
            "transaction_id", sa.BigInteger(), autoincrement=False, nullable=False
        ),
        sa.Column("end_transaction_id", sa.BigInteger(), nullable=True),
        sa.Column("operation_type", sa.SmallInteger(), nullable=False),
        sa.PrimaryKeyConstraint("id", "transaction_id"),
    )
    op.create_index(
        op.f("ix_can_funding_budget_version_end_transaction_id"),
        "can_funding_budget_version",
        ["end_transaction_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_can_funding_budget_version_operation_type"),
        "can_funding_budget_version",
        ["operation_type"],
        unique=False,
    )
    op.create_index(
        op.f("ix_can_funding_budget_version_transaction_id"),
        "can_funding_budget_version",
        ["transaction_id"],
        unique=False,
    )
    op.create_table(
        "can_funding_details_version",
        sa.Column("id", sa.Integer(), autoincrement=False, nullable=False),
        sa.Column("fiscal_year", sa.Integer(), autoincrement=False, nullable=True),
        sa.Column("fund_code", sa.String(), autoincrement=False, nullable=True),
        sa.Column("allowance", sa.String(), autoincrement=False, nullable=True),
        sa.Column("sub_allowance", sa.String(), autoincrement=False, nullable=True),
        sa.Column("allotment", sa.String(), autoincrement=False, nullable=True),
        sa.Column("appropriation", sa.String(), autoincrement=False, nullable=True),
        sa.Column(
            "method_of_transfer",
            postgresql.ENUM(
                "DIRECT",
                "COST_SHARE",
                "IAA",
                "IDDA",
                name="canmethodoftransfer",
                create_type=False,
            ),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "funding_source",
            postgresql.ENUM(
                "OPRE", "ACF", "HHS", name="canfundingsource", create_type=False
            ),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("funding_partner", sa.String(), autoincrement=False, nullable=True),
        sa.Column("created_by", sa.Integer(), autoincrement=False, nullable=True),
        sa.Column("updated_by", sa.Integer(), autoincrement=False, nullable=True),
        sa.Column("created_on", sa.DateTime(), autoincrement=False, nullable=True),
        sa.Column("updated_on", sa.DateTime(), autoincrement=False, nullable=True),
        sa.Column(
            "transaction_id", sa.BigInteger(), autoincrement=False, nullable=False
        ),
        sa.Column("end_transaction_id", sa.BigInteger(), nullable=True),
        sa.Column("operation_type", sa.SmallInteger(), nullable=False),
        sa.PrimaryKeyConstraint("id", "transaction_id"),
    )
    op.create_index(
        op.f("ix_can_funding_details_version_end_transaction_id"),
        "can_funding_details_version",
        ["end_transaction_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_can_funding_details_version_operation_type"),
        "can_funding_details_version",
        ["operation_type"],
        unique=False,
    )
    op.create_index(
        op.f("ix_can_funding_details_version_transaction_id"),
        "can_funding_details_version",
        ["transaction_id"],
        unique=False,
    )
    op.create_table(
        "can_funding_received_version",
        sa.Column(
            "id",
            sa.Integer(),
            server_default=sa.text("nextval('can_funding_received_id_seq')"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("fiscal_year", sa.Integer(), autoincrement=False, nullable=True),
        sa.Column("fund_code", sa.String(), autoincrement=False, nullable=True),
        sa.Column("funding", sa.Numeric(), autoincrement=False, nullable=True),
        sa.Column("notes", sa.String(), autoincrement=False, nullable=True),
        sa.Column("created_by", sa.Integer(), autoincrement=False, nullable=True),
        sa.Column("updated_by", sa.Integer(), autoincrement=False, nullable=True),
        sa.Column("created_on", sa.DateTime(), autoincrement=False, nullable=True),
        sa.Column("updated_on", sa.DateTime(), autoincrement=False, nullable=True),
        sa.Column(
            "transaction_id", sa.BigInteger(), autoincrement=False, nullable=False
        ),
        sa.Column("end_transaction_id", sa.BigInteger(), nullable=True),
        sa.Column("operation_type", sa.SmallInteger(), nullable=False),
        sa.PrimaryKeyConstraint("id", "transaction_id"),
    )
    op.create_index(
        op.f("ix_can_funding_received_version_end_transaction_id"),
        "can_funding_received_version",
        ["end_transaction_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_can_funding_received_version_operation_type"),
        "can_funding_received_version",
        ["operation_type"],
        unique=False,
    )
    op.create_index(
        op.f("ix_can_funding_received_version_transaction_id"),
        "can_funding_received_version",
        ["transaction_id"],
        unique=False,
    )
    op.create_table(
        "can_funding_budget",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("fiscal_year", sa.Integer(), nullable=False),
        sa.Column("fund_code", sa.String(), nullable=False),
        sa.Column("budget", sa.Numeric(), nullable=True),
        sa.Column("notes", sa.String(), nullable=True),
        sa.Column("created_by", sa.Integer(), nullable=True),
        sa.Column("updated_by", sa.Integer(), nullable=True),
        sa.Column("created_on", sa.DateTime(), nullable=True),
        sa.Column("updated_on", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["created_by"],
            ["ops_user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["updated_by"],
            ["ops_user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "can_funding_details",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("fiscal_year", sa.Integer(), nullable=False),
        sa.Column("fund_code", sa.String(), nullable=False),
        sa.Column("allowance", sa.String(), nullable=True),
        sa.Column("sub_allowance", sa.String(), nullable=True),
        sa.Column("allotment", sa.String(), nullable=True),
        sa.Column("appropriation", sa.String(), nullable=True),
        sa.Column(
            "method_of_transfer",
            postgresql.ENUM(
                "DIRECT",
                "COST_SHARE",
                "IAA",
                "IDDA",
                name="canmethodoftransfer",
                create_type=False,
            ),
            nullable=True,
        ),
        sa.Column(
            "funding_source",
            postgresql.ENUM(
                "OPRE", "ACF", "HHS", name="canfundingsource", create_type=False
            ),
            nullable=True,
        ),
        sa.Column("funding_partner", sa.String(), nullable=True),
        sa.Column("created_by", sa.Integer(), nullable=True),
        sa.Column("updated_by", sa.Integer(), nullable=True),
        sa.Column("created_on", sa.DateTime(), nullable=True),
        sa.Column("updated_on", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["created_by"],
            ["ops_user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["updated_by"],
            ["ops_user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "can_funding_received",
        sa.Column(
            "id",
            sa.Integer(),
            server_default=sa.text("nextval('can_funding_received_id_seq')"),
            nullable=False,
        ),
        sa.Column("fiscal_year", sa.Integer(), nullable=False),
        sa.Column("fund_code", sa.String(), nullable=False),
        sa.Column("funding", sa.Numeric(), nullable=True),
        sa.Column("notes", sa.String(), nullable=True),
        sa.Column("created_by", sa.Integer(), nullable=True),
        sa.Column("updated_by", sa.Integer(), nullable=True),
        sa.Column("created_on", sa.DateTime(), nullable=True),
        sa.Column("updated_on", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["created_by"],
            ["ops_user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["updated_by"],
            ["ops_user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.drop_index(
        "ix_can_funding_sources_version_end_transaction_id",
        table_name="can_funding_sources_version",
    )
    op.drop_index(
        "ix_can_funding_sources_version_operation_type",
        table_name="can_funding_sources_version",
    )
    op.drop_index(
        "ix_can_funding_sources_version_transaction_id",
        table_name="can_funding_sources_version",
    )
    op.drop_table("can_funding_sources_version")
    op.drop_index(
        "ix_can_fiscal_year_carry_forward_version_end_transaction_id",
        table_name="can_fiscal_year_carry_forward_version",
    )
    op.drop_index(
        "ix_can_fiscal_year_carry_forward_version_operation_type",
        table_name="can_fiscal_year_carry_forward_version",
    )
    op.drop_index(
        "ix_can_fiscal_year_carry_forward_version_transaction_id",
        table_name="can_fiscal_year_carry_forward_version",
    )
    op.drop_table("can_fiscal_year_carry_forward_version")
    op.drop_index(
        "ix_funding_partner_version_end_transaction_id",
        table_name="funding_partner_version",
    )
    op.drop_index(
        "ix_funding_partner_version_operation_type",
        table_name="funding_partner_version",
    )
    op.drop_index(
        "ix_funding_partner_version_transaction_id",
        table_name="funding_partner_version",
    )
    op.drop_table("funding_partner_version")
    op.drop_table("can_fiscal_year_carry_forward")
    op.drop_index(
        "ix_can_fiscal_year_funding_details_version_end_transaction_id",
        table_name="can_fiscal_year_funding_details_version",
    )
    op.drop_index(
        "ix_can_fiscal_year_funding_details_version_operation_type",
        table_name="can_fiscal_year_funding_details_version",
    )
    op.drop_index(
        "ix_can_fiscal_year_funding_details_version_transaction_id",
        table_name="can_fiscal_year_funding_details_version",
    )
    op.drop_table("can_fiscal_year_funding_details_version")
    op.drop_table("can_fiscal_year_funding_details")
    op.drop_index(
        "ix_funding_source_version_end_transaction_id",
        table_name="funding_source_version",
    )
    op.drop_index(
        "ix_funding_source_version_operation_type", table_name="funding_source_version"
    )
    op.drop_index(
        "ix_funding_source_version_transaction_id", table_name="funding_source_version"
    )
    op.drop_table("funding_source_version")
    op.drop_index(
        "ix_can_appropriation_details_version_end_transaction_id",
        table_name="can_appropriation_details_version",
    )
    op.drop_index(
        "ix_can_appropriation_details_version_operation_type",
        table_name="can_appropriation_details_version",
    )
    op.drop_index(
        "ix_can_appropriation_details_version_transaction_id",
        table_name="can_appropriation_details_version",
    )
    op.drop_table("can_appropriation_details_version")
    op.drop_table("can_funding_sources")
    op.drop_table("can_appropriation_details")
    op.drop_table("funding_source")
    op.drop_index(
        "ix_can_fiscal_year_version_end_transaction_id",
        table_name="can_fiscal_year_version",
    )
    op.drop_index(
        "ix_can_fiscal_year_version_operation_type",
        table_name="can_fiscal_year_version",
    )
    op.drop_index(
        "ix_can_fiscal_year_version_transaction_id",
        table_name="can_fiscal_year_version",
    )
    op.drop_table("can_fiscal_year_version")
    op.add_column("can", sa.Column("nick_name", sa.String(), nullable=True))
    op.add_column("can", sa.Column("funding_details_id", sa.Integer(), nullable=True))
    op.add_column("can", sa.Column("portfolio_id", sa.Integer(), nullable=False))
    op.create_unique_constraint(None, "can", ["number"])
    op.drop_constraint("can_authorizer_id_fkey", "can", type_="foreignkey")
    op.drop_constraint("can_external_authorizer_id_fkey", "can", type_="foreignkey")
    op.drop_constraint("can_managing_portfolio_id_fkey", "can", type_="foreignkey")
    op.drop_constraint("can_division_id_fkey", "can", type_="foreignkey")
    op.create_foreign_key(
        None, "can", "can_funding_details", ["funding_details_id"], ["id"]
    )
    op.create_foreign_key(None, "can", "portfolio", ["portfolio_id"], ["id"])
    op.drop_column("can", "expiration_date")
    op.drop_column("can", "nickname")
    op.drop_column("can", "arrangement_type")
    op.drop_column("can", "division_id")
    op.drop_column("can", "appropriation_date")
    op.drop_column("can", "authorizer_id")
    op.drop_column("can", "external_authorizer_id")
    op.drop_column("can", "can_type")
    op.drop_column("can", "managing_portfolio_id")
    op.add_column(
        "can_version",
        sa.Column("nick_name", sa.String(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "can_version",
        sa.Column(
            "funding_details_id", sa.Integer(), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "can_version",
        sa.Column("portfolio_id", sa.Integer(), autoincrement=False, nullable=True),
    )
    op.drop_column("can_version", "expiration_date")
    op.drop_column("can_version", "nickname")
    op.drop_column("can_version", "arrangement_type")
    op.drop_column("can_version", "division_id")
    op.drop_column("can_version", "appropriation_date")
    op.drop_column("can_version", "authorizer_id")
    op.drop_column("can_version", "external_authorizer_id")
    op.drop_column("can_version", "can_type")
    op.drop_column("can_version", "managing_portfolio_id")
    op.alter_column(
        "document_version",
        "document_size",
        existing_type=sa.NUMERIC(precision=10, scale=2),
        nullable=True,
        autoincrement=False,
    )
    sa.Enum("OPRE", "NON_OPRE", name="cantype").drop(op.get_bind())
    sa.Enum(
        "OPRE_APPROPRIATION",
        "COST_SHARE",
        "IAA",
        "IDDA",
        "MOU",
        name="canarrangementtype",
    ).drop(op.get_bind())
    # ### end Alembic commands ###

    # manually added
    op.drop_table("funding_partner")
    op.drop_table("can_fiscal_year")


def downgrade() -> None:
    # manually added
    sa.Sequence("can_funding_received_id_seq", start=500, increment=1).drop(
        op.get_bind()
    )

    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum(
        "OPRE_APPROPRIATION",
        "COST_SHARE",
        "IAA",
        "IDDA",
        "MOU",
        name="canarrangementtype",
    ).create(op.get_bind())
    sa.Enum("OPRE", "NON_OPRE", name="cantype").create(op.get_bind())
    op.alter_column(
        "document_version",
        "document_size",
        existing_type=sa.NUMERIC(precision=10, scale=2),
        nullable=False,
        autoincrement=False,
    )
    op.add_column(
        "can_version",
        sa.Column(
            "managing_portfolio_id", sa.INTEGER(), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "can_version",
        sa.Column(
            "can_type",
            postgresql.ENUM("OPRE", "NON_OPRE", name="cantype", create_type=False),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "can_version",
        sa.Column(
            "external_authorizer_id", sa.INTEGER(), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "can_version",
        sa.Column("authorizer_id", sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "can_version",
        sa.Column(
            "appropriation_date",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "can_version",
        sa.Column("division_id", sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "can_version",
        sa.Column(
            "arrangement_type",
            postgresql.ENUM(
                "OPRE_APPROPRIATION",
                "COST_SHARE",
                "IAA",
                "IDDA",
                "MOU",
                name="canarrangementtype",
                create_type=False,
            ),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "can_version",
        sa.Column("nickname", sa.VARCHAR(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "can_version",
        sa.Column(
            "expiration_date",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.drop_column("can_version", "portfolio_id")
    op.drop_column("can_version", "funding_details_id")
    op.drop_column("can_version", "nick_name")
    op.add_column(
        "can",
        sa.Column(
            "managing_portfolio_id", sa.INTEGER(), autoincrement=False, nullable=False
        ),
    )
    op.add_column(
        "can",
        sa.Column(
            "can_type",
            postgresql.ENUM("OPRE", "NON_OPRE", name="cantype", create_type=False),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "can",
        sa.Column(
            "external_authorizer_id", sa.INTEGER(), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "can",
        sa.Column("authorizer_id", sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "can",
        sa.Column(
            "appropriation_date",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "can",
        sa.Column("division_id", sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "can",
        sa.Column(
            "arrangement_type",
            postgresql.ENUM(
                "OPRE_APPROPRIATION",
                "COST_SHARE",
                "IAA",
                "IDDA",
                "MOU",
                name="canarrangementtype",
                create_type=False,
            ),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "can", sa.Column("nickname", sa.VARCHAR(), autoincrement=False, nullable=True)
    )
    op.add_column(
        "can",
        sa.Column(
            "expiration_date",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.drop_constraint(None, "can", type_="foreignkey")
    op.drop_constraint(None, "can", type_="foreignkey")
    op.create_foreign_key(
        "can_division_id_fkey", "can", "division", ["division_id"], ["id"]
    )
    op.create_foreign_key(
        "can_managing_portfolio_id_fkey",
        "can",
        "portfolio",
        ["managing_portfolio_id"],
        ["id"],
    )
    op.create_foreign_key(
        "can_external_authorizer_id_fkey",
        "can",
        "contact",
        ["external_authorizer_id"],
        ["id"],
    )
    op.create_foreign_key(
        "can_authorizer_id_fkey", "can", "funding_partner", ["authorizer_id"], ["id"]
    )
    op.drop_constraint(None, "can", type_="unique")
    op.drop_column("can", "portfolio_id")
    op.drop_column("can", "funding_details_id")
    op.drop_column("can", "nick_name")
    op.create_table(
        "can_fiscal_year_version",
        sa.Column("id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("can_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("fiscal_year", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "received_funding",
            sa.NUMERIC(precision=12, scale=2),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "expected_funding",
            sa.NUMERIC(precision=12, scale=2),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "potential_additional_funding",
            sa.NUMERIC(precision=12, scale=2),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("notes", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("created_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("updated_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "created_on", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "updated_on", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column("transaction_id", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column(
            "end_transaction_id", sa.BIGINT(), autoincrement=False, nullable=True
        ),
        sa.Column("operation_type", sa.SMALLINT(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint(
            "id", "fiscal_year", "transaction_id", name="can_fiscal_year_version_pkey"
        ),
    )
    op.create_index(
        "ix_can_fiscal_year_version_transaction_id",
        "can_fiscal_year_version",
        ["transaction_id"],
        unique=False,
    )
    op.create_index(
        "ix_can_fiscal_year_version_operation_type",
        "can_fiscal_year_version",
        ["operation_type"],
        unique=False,
    )
    op.create_index(
        "ix_can_fiscal_year_version_end_transaction_id",
        "can_fiscal_year_version",
        ["end_transaction_id"],
        unique=False,
    )
    op.create_table(
        "funding_source",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('funding_source_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("nickname", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("created_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("updated_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "created_on", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "updated_on", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["created_by"], ["ops_user.id"], name="funding_source_created_by_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["updated_by"], ["ops_user.id"], name="funding_source_updated_by_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="funding_source_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "can_appropriation_details",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "appropriation_prefix", sa.VARCHAR(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "appropriation_postfix", sa.VARCHAR(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "appropriation_year", sa.VARCHAR(), autoincrement=False, nullable=True
        ),
        sa.Column("created_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("updated_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "created_on", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "updated_on", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["created_by"],
            ["ops_user.id"],
            name="can_appropriation_details_created_by_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["updated_by"],
            ["ops_user.id"],
            name="can_appropriation_details_updated_by_fkey",
        ),
        sa.PrimaryKeyConstraint("id", name="can_appropriation_details_pkey"),
    )
    op.create_table(
        "can_funding_sources",
        sa.Column("can_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "funding_source_id", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.Column("created_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("updated_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "created_on", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "updated_on", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["can_id"], ["can.id"], name="can_funding_sources_can_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["created_by"], ["ops_user.id"], name="can_funding_sources_created_by_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["funding_source_id"],
            ["funding_source.id"],
            name="can_funding_sources_funding_source_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["updated_by"], ["ops_user.id"], name="can_funding_sources_updated_by_fkey"
        ),
        sa.PrimaryKeyConstraint(
            "can_id", "funding_source_id", name="can_funding_sources_pkey"
        ),
    )
    op.create_table(
        "can_appropriation_details_version",
        sa.Column("id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "appropriation_prefix", sa.VARCHAR(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "appropriation_postfix", sa.VARCHAR(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "appropriation_year", sa.VARCHAR(), autoincrement=False, nullable=True
        ),
        sa.Column("created_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("updated_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "created_on", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "updated_on", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column("transaction_id", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column(
            "end_transaction_id", sa.BIGINT(), autoincrement=False, nullable=True
        ),
        sa.Column("operation_type", sa.SMALLINT(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint(
            "id", "transaction_id", name="can_appropriation_details_version_pkey"
        ),
    )
    op.create_index(
        "ix_can_appropriation_details_version_transaction_id",
        "can_appropriation_details_version",
        ["transaction_id"],
        unique=False,
    )
    op.create_index(
        "ix_can_appropriation_details_version_operation_type",
        "can_appropriation_details_version",
        ["operation_type"],
        unique=False,
    )
    op.create_index(
        "ix_can_appropriation_details_version_end_transaction_id",
        "can_appropriation_details_version",
        ["end_transaction_id"],
        unique=False,
    )
    op.create_table(
        "funding_source_version",
        sa.Column("id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("nickname", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("created_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("updated_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "created_on", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "updated_on", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column("transaction_id", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column(
            "end_transaction_id", sa.BIGINT(), autoincrement=False, nullable=True
        ),
        sa.Column("operation_type", sa.SMALLINT(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint(
            "id", "transaction_id", name="funding_source_version_pkey"
        ),
    )
    op.create_index(
        "ix_funding_source_version_transaction_id",
        "funding_source_version",
        ["transaction_id"],
        unique=False,
    )
    op.create_index(
        "ix_funding_source_version_operation_type",
        "funding_source_version",
        ["operation_type"],
        unique=False,
    )
    op.create_index(
        "ix_funding_source_version_end_transaction_id",
        "funding_source_version",
        ["end_transaction_id"],
        unique=False,
    )
    op.create_table(
        "can_fiscal_year_funding_details",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("fund", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("allowance", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("sub_allowance", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("allotment_org", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "current_fy_funding_ytd", sa.INTEGER(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "can_fiscal_year_id", sa.INTEGER(), autoincrement=False, nullable=True
        ),
        sa.Column("created_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("updated_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "created_on", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "updated_on", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["can_fiscal_year_id"],
            ["can_fiscal_year.id"],
            name="can_fiscal_year_funding_details_can_fiscal_year_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["created_by"],
            ["ops_user.id"],
            name="can_fiscal_year_funding_details_created_by_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["updated_by"],
            ["ops_user.id"],
            name="can_fiscal_year_funding_details_updated_by_fkey",
        ),
        sa.PrimaryKeyConstraint("id", name="can_fiscal_year_funding_details_pkey"),
    )
    op.create_table(
        "can_fiscal_year_funding_details_version",
        sa.Column("id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("fund", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("allowance", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("sub_allowance", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("allotment_org", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "current_fy_funding_ytd", sa.INTEGER(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "can_fiscal_year_id", sa.INTEGER(), autoincrement=False, nullable=True
        ),
        sa.Column("created_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("updated_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "created_on", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "updated_on", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column("transaction_id", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column(
            "end_transaction_id", sa.BIGINT(), autoincrement=False, nullable=True
        ),
        sa.Column("operation_type", sa.SMALLINT(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint(
            "id", "transaction_id", name="can_fiscal_year_funding_details_version_pkey"
        ),
    )
    op.create_index(
        "ix_can_fiscal_year_funding_details_version_transaction_id",
        "can_fiscal_year_funding_details_version",
        ["transaction_id"],
        unique=False,
    )
    op.create_index(
        "ix_can_fiscal_year_funding_details_version_operation_type",
        "can_fiscal_year_funding_details_version",
        ["operation_type"],
        unique=False,
    )
    op.create_index(
        "ix_can_fiscal_year_funding_details_version_end_transaction_id",
        "can_fiscal_year_funding_details_version",
        ["end_transaction_id"],
        unique=False,
    )
    op.create_table(
        "can_fiscal_year",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('can_fiscal_year_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("can_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("fiscal_year", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "received_funding",
            sa.NUMERIC(precision=12, scale=2),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "expected_funding",
            sa.NUMERIC(precision=12, scale=2),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "potential_additional_funding",
            sa.NUMERIC(precision=12, scale=2),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("notes", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("created_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("updated_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "created_on", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "updated_on", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["can_id"], ["can.id"], name="can_fiscal_year_can_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["created_by"], ["ops_user.id"], name="can_fiscal_year_created_by_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["updated_by"], ["ops_user.id"], name="can_fiscal_year_updated_by_fkey"
        ),
        sa.PrimaryKeyConstraint("id", "fiscal_year", name="can_fiscal_year_pkey"),
        sa.UniqueConstraint(
            "can_id", "fiscal_year", name="can_fiscal_year_can_id_fiscal_year_key"
        ),
        sa.UniqueConstraint("id", name="can_fiscal_year_id_key"),
    )
    op.create_table(
        "can_fiscal_year_carry_forward",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("can_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("from_fiscal_year", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("to_fiscal_year", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "received_amount",
            sa.NUMERIC(precision=12, scale=2),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "expected_amount",
            sa.NUMERIC(precision=12, scale=2),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("notes", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("created_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("updated_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "created_on", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "updated_on", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["can_id"], ["can.id"], name="can_fiscal_year_carry_forward_can_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["created_by"],
            ["ops_user.id"],
            name="can_fiscal_year_carry_forward_created_by_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["updated_by"],
            ["ops_user.id"],
            name="can_fiscal_year_carry_forward_updated_by_fkey",
        ),
        sa.PrimaryKeyConstraint("id", name="can_fiscal_year_carry_forward_pkey"),
    )
    op.create_table(
        "funding_partner_version",
        sa.Column("id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("nickname", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("created_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("updated_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "created_on", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "updated_on", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column("transaction_id", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column(
            "end_transaction_id", sa.BIGINT(), autoincrement=False, nullable=True
        ),
        sa.Column("operation_type", sa.SMALLINT(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint(
            "id", "transaction_id", name="funding_partner_version_pkey"
        ),
    )
    op.create_index(
        "ix_funding_partner_version_transaction_id",
        "funding_partner_version",
        ["transaction_id"],
        unique=False,
    )
    op.create_index(
        "ix_funding_partner_version_operation_type",
        "funding_partner_version",
        ["operation_type"],
        unique=False,
    )
    op.create_index(
        "ix_funding_partner_version_end_transaction_id",
        "funding_partner_version",
        ["end_transaction_id"],
        unique=False,
    )
    op.create_table(
        "can_fiscal_year_carry_forward_version",
        sa.Column("id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("can_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("from_fiscal_year", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("to_fiscal_year", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "received_amount",
            sa.NUMERIC(precision=12, scale=2),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "expected_amount",
            sa.NUMERIC(precision=12, scale=2),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("notes", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("created_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("updated_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "created_on", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "updated_on", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column("transaction_id", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column(
            "end_transaction_id", sa.BIGINT(), autoincrement=False, nullable=True
        ),
        sa.Column("operation_type", sa.SMALLINT(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint(
            "id", "transaction_id", name="can_fiscal_year_carry_forward_version_pkey"
        ),
    )
    op.create_index(
        "ix_can_fiscal_year_carry_forward_version_transaction_id",
        "can_fiscal_year_carry_forward_version",
        ["transaction_id"],
        unique=False,
    )
    op.create_index(
        "ix_can_fiscal_year_carry_forward_version_operation_type",
        "can_fiscal_year_carry_forward_version",
        ["operation_type"],
        unique=False,
    )
    op.create_index(
        "ix_can_fiscal_year_carry_forward_version_end_transaction_id",
        "can_fiscal_year_carry_forward_version",
        ["end_transaction_id"],
        unique=False,
    )
    op.create_table(
        "funding_partner",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("nickname", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("created_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("updated_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "created_on", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "updated_on", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["created_by"], ["ops_user.id"], name="funding_partner_created_by_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["updated_by"], ["ops_user.id"], name="funding_partner_updated_by_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="funding_partner_pkey"),
    )
    op.create_table(
        "can_funding_sources_version",
        sa.Column("can_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "funding_source_id", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.Column("created_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("updated_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "created_on", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "updated_on", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column("transaction_id", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column(
            "end_transaction_id", sa.BIGINT(), autoincrement=False, nullable=True
        ),
        sa.Column("operation_type", sa.SMALLINT(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint(
            "can_id",
            "funding_source_id",
            "transaction_id",
            name="can_funding_sources_version_pkey",
        ),
    )
    op.create_index(
        "ix_can_funding_sources_version_transaction_id",
        "can_funding_sources_version",
        ["transaction_id"],
        unique=False,
    )
    op.create_index(
        "ix_can_funding_sources_version_operation_type",
        "can_funding_sources_version",
        ["operation_type"],
        unique=False,
    )
    op.create_index(
        "ix_can_funding_sources_version_end_transaction_id",
        "can_funding_sources_version",
        ["end_transaction_id"],
        unique=False,
    )
    op.drop_table("can_funding_received")
    op.drop_table("can_funding_details")
    op.drop_table("can_funding_budget")
    op.drop_index(
        op.f("ix_can_funding_received_version_transaction_id"),
        table_name="can_funding_received_version",
    )
    op.drop_index(
        op.f("ix_can_funding_received_version_operation_type"),
        table_name="can_funding_received_version",
    )
    op.drop_index(
        op.f("ix_can_funding_received_version_end_transaction_id"),
        table_name="can_funding_received_version",
    )
    op.drop_table("can_funding_received_version")
    op.drop_index(
        op.f("ix_can_funding_details_version_transaction_id"),
        table_name="can_funding_details_version",
    )
    op.drop_index(
        op.f("ix_can_funding_details_version_operation_type"),
        table_name="can_funding_details_version",
    )
    op.drop_index(
        op.f("ix_can_funding_details_version_end_transaction_id"),
        table_name="can_funding_details_version",
    )
    op.drop_table("can_funding_details_version")
    op.drop_index(
        op.f("ix_can_funding_budget_version_transaction_id"),
        table_name="can_funding_budget_version",
    )
    op.drop_index(
        op.f("ix_can_funding_budget_version_operation_type"),
        table_name="can_funding_budget_version",
    )
    op.drop_index(
        op.f("ix_can_funding_budget_version_end_transaction_id"),
        table_name="can_funding_budget_version",
    )
    op.drop_table("can_funding_budget_version")
    sa.Enum("DIRECT", "COST_SHARE", "IAA", "IDDA", name="canmethodoftransfer").drop(
        op.get_bind()
    )
    sa.Enum("OPRE", "ACF", "HHS", name="canfundingsource").drop(op.get_bind())
    # ### end Alembic commands ###
