version: "3.8"

services:

  db:
    image: "postgres:12"
    platform: linux/amd64
    container_name: ops-db
    security_opt:
      - no-new-privileges:true  # Resolve semgrep https://sg.run/0n8q
    environment:
      - POSTGRES_PASSWORD=local_password
    read_only: true  # Resolve semgrep https://sg.run/e4JE
    tmpfs: /var/run/postgresql/
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  opal_server:
    image: permitio/opal-server:latest
    environment:
      # number of uvicorn workers to run inside the opal-server container
      - UVICORN_NUM_WORKERS=1
      # the git repo hosting our policy
      # - if this repo is not public, you can pass an ssh key via `OPAL_POLICY_REPO_SSH_KEY`)
      # - the repo we pass in this example is *public* and acts as an example repo with dummy rego policy
      # - for more info, see: https://docs.opal.ac/tutorials/track_a_git_repo
      - OPAL_POLICY_REPO_URL=https://github.com/HHS/OPRE-OPS/tree/opa-experiment
      # in this example we will use a polling interval of 30 seconds to check for new policy updates (git commits affecting the rego policy).
      # however, it is better to utilize a git *webhook* to trigger the server to check for changes only when the repo has new commits.
      # for more info see: https://docs.opal.ac/tutorials/track_a_git_repo
      - OPAL_POLICY_REPO_POLLING_INTERVAL=30
      # configures from where the opal client should initially fetch data (when it first goes up, after disconnection, etc).
      # the data sources represents from where the opal clients should get a "complete picture" of the data they need.
      # after the initial sources are fetched, the client will subscribe only to update notifications sent by the server.
      - OPAL_DATA_CONFIG_SOURCES={"config":{"entries":[{"url":"http://opal_server:7002/policy-data","topics":["policy_data"],"dst_path":"/static"}]}}
      - OPAL_LOG_FORMAT_INCLUDE_PID=true
    ports:
      # exposes opal server on the host machine, you can access the server at: http://localhost:7002
      - "7002:7002"

  opal_client:
    # by default we run opal-client from latest official image
    image: permitio/opal-client:latest
    environment:
      - OPAL_SERVER_URL=http://opal_server:7002
      - OPAL_LOG_FORMAT_INCLUDE_PID=true
      - OPAL_INLINE_OPA_LOG_FORMAT=http
    ports:
      # exposes opal client on the host machine, you can access the client at: http://localhost:7000
      - "7000:7000"
      # exposes the OPA agent (being run by OPAL) on the host machine
      # you can access the OPA api that you know and love at: http://localhost:8181
      # OPA api docs are at: https://www.openpolicyagent.org/docs/latest/rest-api/
      - "8181:8181"
    depends_on:
      - opal_server

  # opa:
  #   image: openpolicyagent/opa:0.47.3-rootless
  #   ports:
  #     - "8181:8181"
  #   volumes:
  #     - ./policy:/policy
  #   command:
  #     - "run"
  #     - "--server"
  #     - "--log-format=json-pretty"
  #     - "--set=decision_logs.console=true"
  #   healthcheck:
  #     test: curl --fail http://opa:8181/health || exit 1
  #     interval: 5s
  #     timeout: 5s
  #     retries: 5

  data-import:
    build:
      context: ./data-tools/
      dockerfile: Dockerfile
    platform: linux/amd64
    container_name: ops-data-import
    environment:
      - ENV=local
    command: >
      bash -c "
      DATA=./data/portfolio_data.json5 python src/import_static_data/import_data.py &&
      DATA=./data/funding_partner_data.json5 python src/import_static_data/import_data.py &&
      DATA=./data/funding_source_data.json5 python src/import_static_data/import_data.py &&
      DATA=./data/user_data.json5 python src/import_static_data/import_data.py &&
      DATA=./data/can_data.json5 python src/import_static_data/import_data.py &&
      DATA=./data/agreements_and_blin_data.json5 python src/import_static_data/import_data.py
      "

    volumes:
      # See below for an explanation of this volume. The same reasoning applies,
      # but in this case it's so we can run new migrations immediately without
      # having to rebuild the migration container.
      - ./backend/ops_api:/home/app/ops_api
    depends_on:
      backend:
        condition: service_healthy

  backend:
    build:
      context: ./backend/ops_api/
      dockerfile: Dockerfile
    platform: linux/amd64
    container_name: ops-backend
    ports:
      - "8080:8080"
    command: ["python", "-m", "flask", "run", "--host=0.0.0.0", "--port=8080"]
    environment:
      - JWT_PRIVATE_KEY
      - OPS_CONFIG=environment/local.py
    volumes:
      - ./backend/ops_api/ops:/home/app/ops
    depends_on:
      db:
        condition: service_healthy


    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080" ]
      interval: 10s
      timeout: 10s
      retries: 10

  frontend:
    build:
      context: ./frontend/
      dockerfile: Dockerfile
    platform: linux/amd64
    container_name: ops-frontend
    environment:
      - REACT_APP_BACKEND_DOMAIN=http://localhost:8080
    ports:
      - "3000:3000"
    depends_on:
      - backend
    volumes:
      - ./frontend/:/home/app
