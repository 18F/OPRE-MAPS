services:

  db:
    profiles:
      - ''  # This is the default profile, which is used for development
      - data-initial  # This profile is used to initialize the database with initial data
      - data-demo  # This profile is used to initialize the database with demo data
    image: "postgres:16"
    platform: linux/amd64
    container_name: ops-db
    security_opt:
      - no-new-privileges:true  # Resolve semgrep https://sg.run/0n8q
    environment:
      - POSTGRES_PASSWORD=local_password
    read_only: true  # Resolve semgrep https://sg.run/e4JE
    tmpfs: /var/run/postgresql/
    volumes:
      - ./backend/data_tools/ops_db_sql_init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  data-import:
    profiles:
      - ''  # This is the default profile, which is used for development
    build:
      context: ./backend/
      dockerfile: Dockerfile.data-tools
    platform: linux/amd64
    container_name: ops-data-import
    environment:
      - ENV=local
      - SQLALCHEMY_DATABASE_URI=postgresql://ops:ops@db:5432/postgres
    command: /bin/sh -c "./data_tools/scripts/import_test_data.sh"
    volumes:
      # See below for an explanation of this volume. The same reasoning applies,
      # but in this case it's so we can run new migrations immediately without
      # having to rebuild the migration container.
      - ./backend/ops_api:/home/app/ops_api
    depends_on:
      db:
        condition: service_healthy

  disable-users:
    profiles:
      - ''  # This is the default profile, which is used for development
    build:
      context: ./backend/
      dockerfile: Dockerfile.data-tools
    platform: linux/amd64
    container_name: disable-users
    environment:
      - ENV=local
      - SQLALCHEMY_DATABASE_URI=postgresql://ops:ops@db:5432/postgres
    command: ["/home/app/.venv/bin/python", "./data_tools/src/disable_users/disable_users.py"]
    depends_on:
      db:
        condition: service_healthy
      data-import:
        condition: service_completed_successfully

  backend:
    profiles:
        - ''  # This is the default profile, which is used for development
    build:
      context: ./backend/
      dockerfile: Dockerfile.ops-api
    platform: linux/amd64
    container_name: ops-backend
    ports:
      - "8080:8080"
    command: /bin/sh -c " . .venv/bin/activate && python -m flask run --debug --host=0.0.0.0 --port=8080"
    environment:
      - JWT_PRIVATE_KEY
      - JWT_PUBLIC_KEY
      - OPS_CONFIG=environment/local/container.py
    volumes:
      - ./backend/ops_api/ops:/home/app/ops_api/ops
    depends_on:
      db:
        condition: service_healthy
      data-import:
        condition: service_completed_successfully
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080" ]
      interval: 10s
      timeout: 10s
      retries: 10

  frontend:
    profiles:
      - ''  # This is the default profile, which is used for development
    build:
      context: ./frontend/
      dockerfile: Dockerfile
    platform: linux/amd64
    container_name: ops-frontend
    environment:
      - REACT_APP_BACKEND_DOMAIN=http://localhost:8080
      - VITE_BACKEND_DOMAIN=http://localhost:8080
    ports:
      - "3000:3000"
    depends_on:
      - backend
    volumes:
      - ./frontend/src:/home/app/src

  frontend-static:
    profiles:
      - static
    build:
      context: ./frontend/
      dockerfile: Dockerfile.azure
      args:
        VITE_BACKEND_DOMAIN: http://localhost:8080
        MODE: dev  # set this to production to create a production build
    platform: linux/amd64
    container_name: ops-frontend-static
    ports:
      - "3000:3000"
    depends_on:
      - backend
    volumes:
      - ./frontend/src:/home/app/src


  # The following services are used to initialize the database with initial data using the data-initial profile.

  frontend-static-initial:
    profiles:
      - data-initial
    build:
      context: ./frontend/
      dockerfile: Dockerfile.azure
      args:
        VITE_BACKEND_DOMAIN: http://localhost:8080
        MODE: dev  # set this to production to create a production build
    platform: linux/amd64
    container_name: ops-frontend-static-initial
    ports:
      - "3000:3000"
    depends_on:
      - backend-initial
    volumes:
      - ./frontend/src:/home/app/src


  backend-initial:
    profiles:
      - data-initial
    build:
      context: ./backend/
      dockerfile: Dockerfile.ops-api
    platform: linux/amd64
    container_name: ops-backend-initial
    ports:
      - "8080:8080"
    command: /bin/sh -c " . .venv/bin/activate && python -m flask run --debug --host=0.0.0.0 --port=8080"
    environment:
      - JWT_PRIVATE_KEY
      - JWT_PUBLIC_KEY
      - OPS_CONFIG=environment/local/container.py
    volumes:
      - ./backend/ops_api/ops:/home/app/ops_api/ops
    depends_on:
      db:
        condition: service_healthy
      data-initial:
        condition: service_completed_successfully
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080" ]
      interval: 10s
      timeout: 10s
      retries: 10

  data-initial:
    profiles:
      - data-initial
    build:
      context: ./backend/
      dockerfile: Dockerfile.data-tools
    platform: linux/amd64
    container_name: ops-data-initial
    environment:
      - ENV=local
      - SQLALCHEMY_DATABASE_URI=postgresql://ops:ops@db:5432/postgres
    command: /bin/sh -c "./data_tools/scripts/initial_data.sh"
    volumes:
      - ./backend/ops_api:/home/app/ops_api
    depends_on:
      db:
        condition: service_healthy

  # The following services are used to initialize the database with demo data using the data-demo profile.

  frontend-demo:
    profiles:
      - data-demo
    build:
      context: ./frontend/
      dockerfile: Dockerfile
    environment:
      - REACT_APP_BACKEND_DOMAIN=http://localhost:8080
      - VITE_BACKEND_DOMAIN=http://localhost:8080
    platform: linux/amd64
    container_name: ops-frontend-demo
    ports:
      - "3000:3000"
    depends_on:
      - backend-demo
    volumes:
      - ./frontend/src:/home/app/src

  backend-demo:
    profiles:
      - data-demo
    build:
      context: ./backend/
      dockerfile: Dockerfile.ops-api
    platform: linux/amd64
    container_name: ops-backend-demo
    ports:
      - "8080:8080"
    command: /bin/sh -c " . .venv/bin/activate && python -m flask run --debug --host=0.0.0.0 --port=8080"
    environment:
      - JWT_PRIVATE_KEY
      - JWT_PUBLIC_KEY
      - OPS_CONFIG=environment/local/container.py
    volumes:
      - ./backend/ops_api/ops:/home/app/ops_api/ops
    depends_on:
      db:
        condition: service_healthy
      data-demo:
        condition: service_completed_successfully
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080" ]
      interval: 10s
      timeout: 10s
      retries: 10

  data-demo:
    profiles:
      - data-demo
    build:
      context: ./backend/
      dockerfile: Dockerfile.data-tools
    platform: linux/amd64
    container_name: ops-data-demo
    environment:
      - ENV=local
      - SQLALCHEMY_DATABASE_URI=postgresql://ops:ops@db:5432/postgres
    command: /bin/sh -c "./data_tools/scripts/import_test_data.sh && ./data_tools/scripts/demo_data.sh"
    volumes:
      - ./backend/ops_api:/home/app/ops_api
    depends_on:
      db:
        condition: service_healthy
