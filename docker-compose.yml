version: "3.8"

services:

  db:
    image: "postgres:12"
    platform: linux/amd64
    container_name: ops-db
    security_opt:
      - no-new-privileges:true  # Resolve semgrep https://sg.run/0n8q
    environment:
      - POSTGRES_PASSWORD=local_password
    read_only: true  # Resolve semgrep https://sg.run/e4JE
    tmpfs: /var/run/postgresql/
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  data-import:
    build:
      context: ./backend/
      dockerfile: Dockerfile.data-tools
    platform: linux/amd64
    container_name: ops-data-import
    environment:
      - ENV=local
    command: >
      bash -c "
      python ./data_tools/src/import_static_data/load_db.py &&
      DATA=./data_tools/data/portfolio_data.json5 python ./data_tools/src/import_static_data/import_data.py &&
      DATA=./data_tools/data/funding_partner_data.json5 python ./data_tools/src/import_static_data/import_data.py &&
      DATA=./data_tools/data/funding_source_data.json5 python ./data_tools/src/import_static_data/import_data.py &&
      DATA=./data_tools/data/research_project_data.json5 python ./data_tools/src/import_static_data/import_data.py &&
      DATA=./data_tools/data/can_data.json5 python ./data_tools/src/import_static_data/import_data.py &&
      DATA=./data_tools/data/user_data.json5 python ./data_tools/src/import_static_data/import_data.py &&
      DATA=./data_tools/data/agreements_and_blin_data.json5 python ./data_tools/src/import_static_data/import_data.py &&
      DATA=./data_tools/data/team_leader_data.json5 python ./data_tools/src/import_static_data/import_data.py
      "

    volumes:
      # See below for an explanation of this volume. The same reasoning applies,
      # but in this case it's so we can run new migrations immediately without
      # having to rebuild the migration container.
      - ./backend/ops_api:/home/app/ops_api
    depends_on:
      db:
        condition: service_healthy

  backend:
    build:
      context: ./backend/
      dockerfile: Dockerfile.ops-api
    platform: linux/amd64
    container_name: ops-backend
    ports:
      - "8080:8080"
    command: ["python", "-m", "flask", "run", "--debug", "--host=0.0.0.0", "--port=8080"]
    environment:
      - JWT_PRIVATE_KEY
      - JWT_PUBLIC_KEY
      - OPS_CONFIG=environment/local/container.py
    volumes:
      - ./backend/ops_api/ops:/home/app/ops_api/ops
    depends_on:
      db:
        condition: service_healthy
      data-import:
        condition: service_completed_successfully
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080" ]
      interval: 10s
      timeout: 10s
      retries: 10

  frontend:
    build:
      context: ./frontend/
      dockerfile: Dockerfile
    platform: linux/amd64
    container_name: ops-frontend
    environment:
      - REACT_APP_BACKEND_DOMAIN=http://localhost:8080
    ports:
      - "3000:3000"
    depends_on:
      - backend
    volumes:
      - ./frontend/:/home/app

# OPAL Services
  broadcast_channel:
    image: postgres:alpine
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=local_password
  opal_server:
    image: permitio/opal-server:latest
    environment:
      - OPAL_BROADCAST_URI=postgres://postgres:local_password@broadcast_channel:5432/postgres
      - UVICORN_NUM_WORKERS=4
      - OPAL_POLICY_REPO_URL=https://github.com/HHS/OPRE-OPS/
      - OPAL_POLICY_REPO_MAIN_BRANCH=OPAL-AuthN-Experiment
      - OPAL_POLICY_REPO_POLLING_INTERVAL=30
      - OPAL_DATA_CONFIG_SOURCES={"config":{"entries":[{"url":"http://opal_server:7002/policy-data","topics":["policy_data"],"dst_path":"/static"}]}}
      - OPAL_LOG_FORMAT_INCLUDE_PID=true
    ports:
      - "7002:7002"
    depends_on:
      - broadcast_channel
  opal_client:
    image: permitio/opal-client:latest
    environment:
      - OPAL_SERVER_URL=http://opal_server:7002
      - OPAL_LOG_FORMAT_INCLUDE_PID=true
      - OPAL_INLINE_OPA_LOG_FORMAT=http
      - WAIT_ON_SERVER_LOAD=true
    ports:
      - "7766:7000"
      - "8181:8181"
    depends_on:
      - opal_server
    command: sh -c "./wait-for.sh opal_server:7002 --timeout=20 -- ./start.sh"
